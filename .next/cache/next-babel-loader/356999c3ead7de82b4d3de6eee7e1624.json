{"ast":null,"code":"var _jsxFileName = \"D:\\\\personal\\\\react\\\\react_group_1\\\\homework2\\\\src\\\\components\\\\Dashboard\\\\TotalPercentage\\\\TotalPercentage.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport NumberFormat from 'react-number-format';\nimport './TotalPercentage.scss';\n\nfunction TotalPercentage({\n  data\n}) {\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"total-percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }\n  }, \"\\u10DE\\u10E0\\u10DD\\u10EA\\u10D4\\u10DC\\u10E2\\u10E3\\u10DA\\u10D8 \\u10DB\\u10D0\\u10E9\\u10D5\\u10D4\\u10DC\\u10D4\\u10D1\\u10D4\\u10DA\\u10D8\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }, __jsx(\"li\", {\n    className: \"green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 21\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 25\n    }\n  }, __jsx(NumberFormat, {\n    value: data.Global ? (data.Global.TotalRecovered / data.Global.TotalConfirmed * 100).toFixed(2) : 0,\n    thousandSeparator: true,\n    displayType: 'text',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 29\n    }\n  }), \" %\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 25\n    }\n  }, \"\\u10D2\\u10D0\\u10DB\\u10DD\\u10EF\\u10D0\\u10DC\\u10DB\\u10E0\\u10D7\\u10D4\\u10DA\\u10D4\\u10D1\\u10E3\\u10DA\\u10D8\")), __jsx(\"li\", {\n    className: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 25\n    }\n  }, __jsx(NumberFormat, {\n    value: data.Global ? (data.Global.TotalDeaths / data.Global.TotalConfirmed * 100).toFixed(2) : 0,\n    thousandSeparator: true,\n    displayType: 'text',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 29\n    }\n  }), \" %\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 25\n    }\n  }, \"\\u10E1\\u10D8\\u10D9\\u10D5\\u10D3\\u10D8\\u10DA\\u10D8\\u10D0\\u10DC\\u10DD\\u10D1\\u10D0\")), __jsx(\"li\", {\n    className: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }\n  }, __jsx(NumberFormat, {\n    value: data.Global ? (data.Global.NewConfirmed / data.Global.TotalConfirmed * 100).toFixed(2) : 0,\n    thousandSeparator: true,\n    displayType: 'text',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }\n  }), \" %\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  }, \"\\u10D9\\u10E0\\u10D8\\u10E2\\u10D8\\u10D9\\u10E3\\u10DA\\u10D8\")), __jsx(\"li\", {\n    className: \"yellow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, data.Countries ? data.Countries.filter(el => el.TotalConfirmed !== 0).length : 0), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }, \"\\u10D8\\u10DC\\u10E4\\u10D8\\u10EA\\u10D8\\u10E0\\u10D4\\u10D1\\u10E3\\u10DA\\u10D8 \\u10E5\\u10D5\\u10D4\\u10E7\\u10DC\\u10D4\\u10D1\\u10D8\")))));\n}\n\nexport default TotalPercentage;","map":{"version":3,"sources":["D:/personal/react/react_group_1/homework2/src/components/Dashboard/TotalPercentage/TotalPercentage.jsx"],"names":["React","NumberFormat","TotalPercentage","data","Global","TotalRecovered","TotalConfirmed","toFixed","TotalDeaths","NewConfirmed","Countries","filter","el","length"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AAEA,OAAO,wBAAP;;AAGA,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAmC;AAC/B,SACI,4BACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uIADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD;AACI,IAAA,KAAK,EAAEA,IAAI,CAACC,MAAL,GAAc,CAAED,IAAI,CAACC,MAAL,CAAYC,cAAZ,GAA6BF,IAAI,CAACC,MAAL,CAAYE,cAA1C,GAA4D,GAA7D,EAAkEC,OAAlE,CAA0E,CAA1E,CAAd,GAA6F,CADxG;AAEI,IAAA,iBAAiB,EAAE,IAFvB;AAGI,IAAA,WAAW,EAAE,MAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,OADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8GARJ,CADJ,EAWI;AAAI,IAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD;AACI,IAAA,KAAK,EAAEJ,IAAI,CAACC,MAAL,GAAc,CAAED,IAAI,CAACC,MAAL,CAAYI,WAAZ,GAA0BL,IAAI,CAACC,MAAL,CAAYE,cAAvC,GAAyD,GAA1D,EAA+DC,OAA/D,CAAuE,CAAvE,CAAd,GAA0F,CADrG;AAEI,IAAA,iBAAiB,EAAE,IAFvB;AAGI,IAAA,WAAW,EAAE,MAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,OADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFARJ,CAXJ,EAqBI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD;AACI,IAAA,KAAK,EAAEJ,IAAI,CAACC,MAAL,GAAc,CAAED,IAAI,CAACC,MAAL,CAAYK,YAAZ,GAA2BN,IAAI,CAACC,MAAL,CAAYE,cAAxC,GAA0D,GAA3D,EAAgEC,OAAhE,CAAwE,CAAxE,CAAd,GAA2F,CADtG;AAEI,IAAA,iBAAiB,EAAE,IAFvB;AAGI,IAAA,WAAW,EAAE,MAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,OADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DARJ,CArBJ,EA+BI;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,IAAI,CAACO,SAAL,GAAiBP,IAAI,CAACO,SAAL,CAAeC,MAAf,CAAsBC,EAAE,IAAGA,EAAE,CAACN,cAAH,KAAsB,CAAjD,EAAoDO,MAArE,GAA8E,CAAnF,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iIAFJ,CA/BJ,CAFJ,CADJ,CADJ;AA2CH;;AAED,eAAeX,eAAf","sourcesContent":["import React from 'react';\r\nimport NumberFormat from 'react-number-format';\r\n\r\nimport './TotalPercentage.scss';\r\n\r\n\r\nfunction TotalPercentage({ data }) {\r\n    return (\r\n        <>\r\n            <div className=\"total-percentage\">\r\n                <h1>პროცენტული მაჩვენებელი</h1>\r\n                <ul>\r\n                    <li className='green'>\r\n                        <h2>\r\n                            <NumberFormat\r\n                                value={data.Global ? ((data.Global.TotalRecovered / data.Global.TotalConfirmed) * 100).toFixed(2) : 0}\r\n                                thousandSeparator={true}\r\n                                displayType={'text'}\r\n                            /> %\r\n                        </h2>\r\n                        <p>გამოჯანმრთელებული</p>\r\n                    </li>\r\n                    <li className='red'>\r\n                        <h2>\r\n                            <NumberFormat\r\n                                value={data.Global ? ((data.Global.TotalDeaths / data.Global.TotalConfirmed) * 100).toFixed(2) : 0}\r\n                                thousandSeparator={true}\r\n                                displayType={'text'}\r\n                            /> %\r\n                        </h2>\r\n                        <p>სიკვდილიანობა</p>\r\n                    </li>\r\n                    <li className='blue'>\r\n                        <h2>\r\n                            <NumberFormat\r\n                                value={data.Global ? ((data.Global.NewConfirmed / data.Global.TotalConfirmed) * 100).toFixed(2) : 0}\r\n                                thousandSeparator={true}\r\n                                displayType={'text'}\r\n                            /> %\r\n                        </h2>\r\n                        <p>კრიტიკული</p>\r\n                    </li>\r\n                    <li className='yellow'>\r\n                        <h2>{data.Countries ? data.Countries.filter(el=> el.TotalConfirmed !== 0).length : 0}</h2>\r\n                        <p>ინფიცირებული ქვეყნები</p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TotalPercentage;"]},"metadata":{},"sourceType":"module"}